{"version":3,"sources":["data-source/service.ts","components/doctor-list/doctor-cart-item.tsx","components/doctor-list/index.tsx","App.tsx","index.tsx"],"names":["Service","_data","data","mergeTelephones","items","result","key","push","toString","replaceAll","split","join","mergeSequences","sequences","sequence","days","times","splitAndReplaceDaySeq","adjustDaySeqTime","value","daySequence","map","x","getServiceTypes","serviceTypes","reduce","current","Set","getAreas","areas","regions","item","region","locations","filter","location","retrieveData","page","filtered_data","length","some","y","includes","total_items","pages","Math","ceil","from","to","slice","this","serviceType","daySeq1","daySeq1Time","daySeq2","daySeq2Time","daySeq3","daySeq3Time","daySeq4","daySeq4Time","telephones","telephone1","telephone2","useStyles","makeStyles","theme","createStyles","header","display","justifyContent","cardContent","paddingBottom","spacing","serviceTypeContainer","flexWrap","margin","marginLeft","contactList","paddingLeft","paddingRight","DoctorCartItem","classes","Grid","xs","Card","variant","CardContent","className","Typography","name","index","Chip","label","List","ListItem","ListItemIcon","ListItemText","primary","address1","secondary","address2","color","gutterBottom","price","Fragment","day","dayIndex","size","icon","fontSize","checkedIcon","filtering","marginTop","pagination","DoctorList","dataSource","require","service","useState","setData","setPage","selectedRegion","setSelectedRegion","selectedLocation","setSelectedLocation","selectedService","setSelectedService","useEffect","container","Autocomplete","multiple","options","getOptionLabel","option","renderOption","selected","Checkbox","style","marginRight","checked","renderInput","params","TextField","placeholder","onChange","_event","Alert","severity","Pagination","count","App","Container","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.309b69f5.chunk.js","sourcesContent":["import { IArea, IData, IDoctor, Sequence } from './schemas';\n\nconst PAGE_SIZE = 8;\n\nexport class Service {\n    data: IDoctor[];\n    \n    constructor(_data: IData[]) {\n        this.data = _data.map((item: IData) => {\n            return {\n                ...item,\n                serviceTypes: item.serviceType.split('/'),\n                sequences: this.mergeSequences([\n                    {days: item.daySeq1, times: item.daySeq1Time},\n                    {days: item.daySeq2, times: item.daySeq2Time},\n                    {days: item.daySeq3, times: item.daySeq3Time},\n                    {days: item.daySeq4, times: item.daySeq4Time}\n                ]),\n                telephones: this.mergeTelephones([item.telephone1, item.telephone2]),\n            }\n        });\n    }\n\n    private mergeTelephones = (items:[string | number, string | number]) => {\n        const result = [];\n        for (const key in items) {\n            if(items[key])\n                result.push(...items[key].toString().replaceAll(' ', '').split(/\\//));\n        }\n        return result.join(', ');\n    }\n\n    private mergeSequences = (sequences: {days: string, times: string}[]) => {\n        const result: Sequence[] = []; \n        for (const key in sequences) {\n            const sequence = sequences[key];\n            if(sequence.days || sequence.times)\n                result.push({\n                    days: this.splitAndReplaceDaySeq(sequence.days),\n                    times: this.adjustDaySeqTime(sequence.times)\n                });\n        }\n        return result;\n    }\n\n    private splitAndReplaceDaySeq = (value: string) => { \n        const daySequence: { [key: string]: string } = {\n            'Mon':   \"Monday\",\n            'Tue':   \"Tuesday\",\n            'Wed':   \"Wednesday\",\n            'Thu':   \"Thursday\",\n            'Thur':  \"Thursday\",\n            'Thus':  \"Thursday\",\n            'Thurs': \"Thursday\",\n            'Fri':   \"Friday\",\n            'Sat':   \"Saturday\",\n            'Sun':   \"Sunday\",\n            'PH':    \"Public Holiday\"\n        };\n\n        if(value)\n            return value.replaceAll(' ', '').split(/,|&|\\/|-/).map(x => daySequence[x]);\n        return [];\n    }\n\n    private adjustDaySeqTime = (value: string) => { \n        if(value)\n            return value.replaceAll(' ', '').split(/;|,|,|&/).join(', ');\n        return '';\n    }\n\n\n    getServiceTypes = () => {\n        return this.data.map(x=> x.serviceTypes).reduce(function(result, current) {\n            return [...new Set([...result, ...current])]\n        });\n    }\n\n    getAreas = () => {\n        const areas: IArea[] = [];\n        const regions = [...new Set(this.data.map(item => item.region))];\n        for (const key in regions) {\n            const region = regions[key];\n            const locations = [...new Set(this.data.filter(x=> x.region === region).map(item => item.location))];\n            areas.push({\n                region: region,\n                locations: locations\n            })\n        }\n\n        return areas;\n    }\n\n    retrieveData = (page: number, filter: {\n        serviceTypes: string[] | null,\n        region: string | null,\n        locations: string[] | null,\n    }) => {\n        let filtered_data = this.data;\n        if(filter.serviceTypes && filter.serviceTypes?.length > 0)\n            filtered_data = filtered_data.filter(x=> x.serviceTypes.some(y=> filter.serviceTypes?.includes(y)));\n\n        if(filter.region)\n            filtered_data = filtered_data.filter(x=> x.region === filter.region);\n\n        if(filter.locations && filter.locations?.length > 0)\n            filtered_data = filtered_data.filter(x=> filter.locations?.includes(x.location));\n\n        const total_items = filtered_data.length;\n        const pages = Math.ceil(total_items/PAGE_SIZE);\n\n        const from = (page - 1) * PAGE_SIZE;\n        const to = (page * PAGE_SIZE) < total_items ? page * PAGE_SIZE : total_items;\n        const result = filtered_data.slice(from, to);\n\n        return {\n            items: result,\n            pages: pages\n        }\n    }\n}\n","import React from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport { Chip, Grid, List, ListItem, ListItemIcon, ListItemText, Card, CardContent, Typography } from '@material-ui/core';\nimport PlaceIcon from '@material-ui/icons/Place';\nimport PhoneIcon from '@material-ui/icons/Phone';\nimport { IDoctor } from '../../data-source/schemas';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    header:{\n        display: 'flex',\n        justifyContent: 'space-between'\n    },\n    cardContent:{\n        paddingBottom: `${theme.spacing(2)}px!important`\n    },\n    serviceTypeContainer:{\n        display: 'flex',\n        justifyContent: 'flex-start',\n        flexWrap: 'wrap',\n        '& > *': {\n          margin: theme.spacing(0.5),\n        },\n        '& :first-child':{\n          marginLeft: 0,\n        }\n    },\n    contactList:{\n        '& .MuiListItem-root':{\n            paddingLeft: 0,\n            paddingRight: 0,\n        }\n    },\n    sequences:{\n        display: 'flex',\n        justifyContent: 'flex-start',\n        flexWrap: 'wrap',\n        '& > *': {\n          margin: theme.spacing(0.5),\n        },\n        '& :first-child':{\n          marginLeft: 0,\n        }\n    }\n  }),\n);\n\nconst DoctorCartItem: React.FC<{data: IDoctor}> = ({data}) => {\n    const classes = useStyles();\n        \n    return (\n        <Grid item xs={12}>\n            <Card variant=\"outlined\">\n            <CardContent className={classes.cardContent}>\n            <div className={classes.header}>\n                <Typography>{data.name}</Typography>\n                <div className={classes.serviceTypeContainer}>\n                    {data.serviceTypes.map((item, index) => <Chip key={index} label={item} variant=\"outlined\" />)}\n                </div>\n            </div>\n            <List className={classes.contactList}>\n                <ListItem>\n                <ListItemIcon>\n                    <PlaceIcon />\n                </ListItemIcon>\n                <ListItemText primary={data.address1} secondary={<span>\n                    <div>{data.address2}</div>\n                    <small><i>({data.region}/{data.location})</i></small>\n                </span>} />\n                </ListItem>\n                <ListItem>\n                <ListItemIcon>\n                    <PhoneIcon />\n                </ListItemIcon>\n                <ListItemText primary={data.telephones} />\n                </ListItem>\n            </List>\n            <Typography color=\"textSecondary\" gutterBottom>Consultation Fee: ${data.price}</Typography>\n            <div className={classes.sequences}>\n                {data.sequences.map((sequence, index) => \n                    <React.Fragment key={index}>\n                        {sequence.days.map((day, dayIndex) => \n                            <Chip key={dayIndex} label={`${day}: ${sequence.times}`} variant=\"outlined\" size=\"small\" />\n                        )}\n                    </React.Fragment>\n                )}\n            </div>\n            </CardContent>\n        </Card>\n        </Grid>\n    );\n}\n\nexport default DoctorCartItem;\n","import React, { useEffect, useState } from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport { Checkbox, Grid, TextField } from '@material-ui/core';\nimport {Pagination, Autocomplete, Alert } from '@material-ui/lab';\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\nimport { Service } from '../../data-source/service';\nimport { IArea, IDoctor } from '../../data-source/schemas';\nimport DoctorCartItem from './doctor-cart-item';\n\nconst icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\nconst checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    filtering:{\n        marginTop: theme.spacing(2)\n    },\n    pagination:{\n        '& .MuiPagination-ul':{\n            justifyContent: 'center'\n        }\n    }\n  }),\n);\n\nconst DoctorList: React.FC = () => {\n    const classes = useStyles();\n    let dataSource = require('../../data.json');\n    const service = new Service(dataSource);\n    const areas = service.getAreas();\n    const serviceTypes = service.getServiceTypes();\n    const [data, setData] = useState<{\n        items: IDoctor[];\n        pages: number;\n    }>({\n        items: [],\n        pages: 0,\n    });\n    const [page, setPage] = useState<number>(1);\n    const [selectedRegion, setSelectedRegion] = useState<IArea | null>(null);\n    const [selectedLocation, setSelectedLocation] = useState<string[] | null>(null);\n    const [selectedService, setSelectedService] = useState<string[] | null>(null);\n\n    useEffect(() => {\n        setData(service.retrieveData(page, {\n            serviceTypes: selectedService,\n            region: selectedRegion ? selectedRegion.region : null,\n            locations: selectedLocation\n        }));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    },[page, selectedService, selectedRegion, selectedLocation]);\n    \n    return (\n        <Grid container spacing={3}>\n            <Grid item xs={12}>\n                <Grid container spacing={3} className={classes.filtering}>\n                    <Grid item xs={12}>\n                        <Autocomplete\n                            size=\"small\"\n                            multiple\n                            options={serviceTypes}\n                            getOptionLabel={(option) => option}\n                            renderOption={(option, { selected }) => (\n                                <React.Fragment>\n                                  <Checkbox\n                                    icon={icon}\n                                    checkedIcon={checkedIcon}\n                                    style={{ marginRight: 8 }}\n                                    checked={selected}\n                                  />\n                                  {option}\n                                </React.Fragment>\n                            )}\n                            renderInput={(params) => (\n                                <TextField {...params} variant=\"outlined\" label=\"Services\" placeholder=\"choose a service\" />\n                            )}\n                            onChange={(_event, value) => {\n                                setSelectedService(value);\n                                setPage(1);\n                            }}\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Autocomplete\n                            size=\"small\"\n                            options={areas}\n                            getOptionLabel={(option) => option.region}\n                            renderInput={(params) => (\n                                <TextField {...params} variant=\"outlined\" label=\"Region\" placeholder=\"choose a region\" />\n                            )}\n                            onChange={(_event, value) => {\n                                setSelectedRegion(value)\n                                setSelectedLocation(null);\n                                setPage(1);\n                            }}\n                        />\n                    </Grid>\n                    {selectedRegion && <Grid item xs={12}>\n                        <Autocomplete\n                            size=\"small\"\n                            multiple\n                            options={selectedRegion ? selectedRegion.locations : []}\n                            getOptionLabel={(option) => option}\n                            renderOption={(option, { selected }) => (\n                                <React.Fragment>\n                                  <Checkbox\n                                    icon={icon}\n                                    checkedIcon={checkedIcon}\n                                    style={{ marginRight: 8 }}\n                                    checked={selected}\n                                  />\n                                  {option}\n                                </React.Fragment>\n                            )}\n                            renderInput={(params) => (\n                                <TextField {...params} variant=\"outlined\" label=\"Locations\" placeholder=\"choose a location\" />\n                            )}\n                            onChange={(_event, value) => {\n                                setSelectedLocation(value);\n                                setPage(1);\n                            }}\n                        />\n                    </Grid>}\n                </Grid>\n            </Grid>\n            {data.items.length === 0 ?\n                <Grid item xs={12}>\n                    <Alert variant=\"outlined\" severity=\"warning\">It looks like there aren't any matches for your search!</Alert>\n                </Grid>\n            :\n                data.items.map((item, index) => <DoctorCartItem key={index} data={item} />)\n            }\n            <Grid item xs={12}>\n                <Pagination\n                    className={classes.pagination}\n                    count={data.pages}\n                    page={page}\n                    onChange={(_event: React.ChangeEvent<unknown>, value: number) => setPage(value)}\n                />\n            </Grid>\n        </Grid>\n    );\n}\n\nexport default DoctorList;\n","import { Container } from '@material-ui/core';\nimport DoctorList from './components/doctor-list';\n\nfunction App() {\n\n  return (\n    <Container>\n      <DoctorList />\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}